apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: prometheus-kafka-adapter
  name: prometheus-kafka-adapter
  namespace: integraciones
spec:
  progressDeadlineSeconds: 600
  replicas: 3
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: prometheus-kafka-adapter
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: prometheus-kafka-adapter
    spec:
      containers:
      - image: "{{ .Values.adapter.image.repository }}:{{ .Values.adapter.image.tag }}"
        imagePullPolicy: "{{ .Values.adapter.image.pullPolicy }}"
        name: prometheus-kafka-adapter
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        env:
        - name: KAFKA_BROKER_LIST
          value: {{ .Values.adapter.environment.KAFKA_BROKER_LIST }}
        - name: KAFKA_TOPIC
          value: {{ .Values.adapter.environment.KAFKA_TOPIC }}
        - name: KAFKA_SSL_CA_CERT_FILE
          value: {{ .Values.adapter.environment.KAFKA_SSL_CA_CERT_FILE }}
        - name: KAFKA_SSL_CLIENT_KEY_FILE
          value: {{ .Values.adapter.environment.KAFKA_SSL_CLIENT_KEY_FILE }}
        - name: KAFKA_SSL_CLIENT_CERT_FILE
          value: {{ .Values.adapter.environment.KAFKA_SSL_CLIENT_CERT_FILE }}
        - name: PORT
          value: "8080"
        volumeMounts:
        - mountPath: /etc/ssl/certs/my-certs
          name: ca-pemstore
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
      dnsPolicy: ClusterFirst
      schedulerName: default-scheduler
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      volumes:
      - configMap:
          defaultMode: 420
          name: kafka-certs
        name: ca-pemstore
